package org.book2words.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table LIBRARY_BOOK.
*/
public class LibraryBookDao extends AbstractDao<LibraryBook, Long> {

    public static final String TABLENAME = "LIBRARY_BOOK";

        public LibraryBookDao(DaoConfig config) {
        super(config);
    };


    public LibraryBookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }
    
    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LIBRARY_BOOK' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NAME' TEXT NOT NULL ," + // 1: name
                "'AUTHORS' TEXT NOT NULL ," + // 2: authors
                "'ADAPTED' INTEGER NOT NULL ," + // 3: adapted
                "'CURRENT_PARTITION' INTEGER NOT NULL ," + // 4: currentPartition
                "'COUNT_PARTITIONS' INTEGER NOT NULL ," + // 5: countPartitions
                "'WORDS_COUNT' INTEGER NOT NULL ," + // 6: wordsCount
                "'UNIQUE_WORDS_COUNT' INTEGER NOT NULL ," + // 7: uniqueWordsCount
                "'UNKNOWN_WORDS_COUNT' INTEGER NOT NULL ," + // 8: unknownWordsCount
                "'LANGUAGE' TEXT NOT NULL ," + // 9: language
                "'PATH' TEXT NOT NULL UNIQUE );"); // 10: path
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LIBRARY_BOOK'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LibraryBook entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getAuthors());
        stmt.bindLong(4, entity.getAdapted());
        stmt.bindLong(5, entity.getCurrentPartition());
        stmt.bindLong(6, entity.getCountPartitions());
        stmt.bindLong(7, entity.getWordsCount());
        stmt.bindLong(8, entity.getUniqueWordsCount());
        stmt.bindLong(9, entity.getUnknownWordsCount());
        stmt.bindString(10, entity.getLanguage());
        stmt.bindString(11, entity.getPath());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public LibraryBook readEntity(Cursor cursor, int offset) {
        LibraryBook entity = new LibraryBook( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.getString(offset + 2), // authors
            cursor.getInt(offset + 3), // adapted
            cursor.getInt(offset + 4), // currentPartition
            cursor.getInt(offset + 5), // countPartitions
            cursor.getInt(offset + 6), // wordsCount
            cursor.getInt(offset + 7), // uniqueWordsCount
            cursor.getInt(offset + 8), // unknownWordsCount
            cursor.getString(offset + 9), // language
            cursor.getString(offset + 10) // path
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LibraryBook entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setAuthors(cursor.getString(offset + 2));
        entity.setAdapted(cursor.getInt(offset + 3));
        entity.setCurrentPartition(cursor.getInt(offset + 4));
        entity.setCountPartitions(cursor.getInt(offset + 5));
        entity.setWordsCount(cursor.getInt(offset + 6));
        entity.setUniqueWordsCount(cursor.getInt(offset + 7));
        entity.setUnknownWordsCount(cursor.getInt(offset + 8));
        entity.setLanguage(cursor.getString(offset + 9));
        entity.setPath(cursor.getString(offset + 10));
     }
     
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(LibraryBook entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(LibraryBook entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }
    
    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

/**
     * Properties of entity LibraryBook.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Authors = new Property(2, String.class, "authors", false, "AUTHORS");
        public final static Property Adapted = new Property(3, int.class, "adapted", false, "ADAPTED");
        public final static Property CurrentPartition = new Property(4, int.class, "currentPartition", false, "CURRENT_PARTITION");
        public final static Property CountPartitions = new Property(5, int.class, "countPartitions", false, "COUNT_PARTITIONS");
        public final static Property WordsCount = new Property(6, int.class, "wordsCount", false, "WORDS_COUNT");
        public final static Property UniqueWordsCount = new Property(7, int.class, "uniqueWordsCount", false, "UNIQUE_WORDS_COUNT");
        public final static Property UnknownWordsCount = new Property(8, int.class, "unknownWordsCount", false, "UNKNOWN_WORDS_COUNT");
        public final static Property Language = new Property(9, String.class, "language", false, "LANGUAGE");
        public final static Property Path = new Property(10, String.class, "path", false, "PATH");
    }
    
}
